#include <iostream>
#include <cstdlib>

using namespace std;

class Envi {
public:
    float temp[50];
    float humi[50];
    float poll[50];
    int n;

    void add();
    void cal();
    void display();
    void safe();
    void sortData();
    void impactAnalysis();
    void healthImpactAnalysis();

private:
    float totalTemp;
    float totalHumi;
    float totalPoll;
    float minTemp;
    float maxTemp;
    float minHumi;
    float maxHumi;
    float minPoll;
    float maxPoll;
};

void Envi::add() {
    cout << "Enter the number of data points you want to insert: ";
    cin >> n;
    if (n <= 0) {
        cout << "No Data" << endl;
        return;
    }
    if (n > 50) {
        cout << "You can only enter a maximum of 50 data points." << endl;
        n = 50;
    }

    // No srand here, so random numbers will be the same each time the program is run

    for (int i = 0; i < n; i++) {
        // Generating random values for temp, humidity, and pollution
        temp[i] = (rand() % 60) - 10;  // Random temp between -10°C and 50°C
        humi[i] = rand() % 101;         // Random humidity between 0% and 100%
        poll[i] = rand() % 500;         // Random pollution level between 0 and 500 (AQI)

        cout << "Instance " << (i + 1) << ": "
             << "Temperature = " << temp[i]
             << ", Humidity = " << humi[i]
             << ", Pollution = " << poll[i] << endl;
    }
}

void Envi::cal() {
    totalTemp = totalHumi = totalPoll = 0;
    minTemp = maxTemp = temp[0];
    minHumi = maxHumi = humi[0];
    minPoll = maxPoll = poll[0];

    for (int i = 0; i < n; i++) {
        totalTemp += temp[i];
        totalHumi += humi[i];
        totalPoll += poll[i];

        // Calculate min and max
        if (temp[i] < minTemp) minTemp = temp[i];
        if (temp[i] > maxTemp) maxTemp = temp[i];
        if (humi[i] < minHumi) minHumi = humi[i];
        if (humi[i] > maxHumi) maxHumi = humi[i];
        if (poll[i] < minPoll) minPoll = poll[i];
        if (poll[i] > maxPoll) maxPoll = poll[i];
    }
}

void Envi::display() {
    if (n == 0) {
        cout << "No data to display." << endl;
        return;
    }

    cout << "\nDisplaying all entries:" << endl;
    for (int i = 0; i < n; i++) {
        cout << "Instance " << (i + 1) << ": Temperature = " << temp[i]
             << ", Humidity = " << humi[i]
             << ", Pollution = " << poll[i] << endl;
    }
    cout << "Average Temperature: " << totalTemp / n << endl;
    cout << "Min Temperature: " << minTemp << ", Max Temperature: " << maxTemp << endl;
    cout << "Average Humidity: " << totalHumi / n << endl;
    cout << "Min Humidity: " << minHumi << ", Max Humidity: " << maxHumi << endl;
    cout << "Average Pollution: " << totalPoll / n << endl;
    cout << "Min Pollution: " << minPoll << ", Max Pollution: " << maxPoll << endl;
}

void Envi::safe() {
    const float safe_temp = 35.0f;
    const float safe_humi = 80.0f;
    const float safe_poll = 100.0f;
   
    for (int i = 0; i < n; i++) {
        if (temp[i] > safe_temp) {
            cout << "Instance " << (i + 1) << " is Unsafe Due to High Temperature\n";
        }
        if (humi[i] > safe_humi) {
            cout << "Instance " << (i + 1) << " is Unsafe Due to High Humidity\n";
        }
        if (poll[i] > safe_poll) {
            cout << "Instance " << (i + 1) << " is Unsafe Due to High Pollution Level\n";
        }
    }
}

void Envi::sortData() {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (temp[j] > temp[j + 1]) {
                // Swap temperatures
                float tempSwap = temp[j];
                temp[j] = temp[j + 1];
                temp[j + 1] = tempSwap;

                // Swap corresponding humidity and pollution values
                float humiSwap = humi[j];
                humi[j] = humi[j + 1];
                humi[j + 1] = humiSwap;

                float pollSwap = poll[j];
                poll[j] = poll[j + 1];
                poll[j + 1] = pollSwap;
            }
        }
    }
    cout << "Data sorted by temperature." << endl;
}

void Envi::impactAnalysis() {
    cout << "\nImpact Analysis:\n";
    // Define criteria for impact analysis
    for (int i = 0; i < n; i++) {
        if (temp[i] > 30) {
            cout << "High temperature at instance " << (i + 1) << " can lead to heat stress.\n";
        }
        if (poll[i] > 150) {
            cout << "High pollution at instance " << (i + 1) << " can impact air quality.\n";
        }
    }
}

void Envi::healthImpactAnalysis() {
    cout << "\nHealth Impact Analysis:\n";
    // Health implications based on pollution levels
    for (int i = 0; i < n; i++) {
        if (poll[i] > 200) {
            cout << "Instance " << (i + 1) << " is at high risk for respiratory issues.\n";
        }
    }
}

int main() {
    Envi e;
    int choice, a;
    do {
        cout << "\nMenu:\n";
        cout << "1. Add Data\n";
        cout << "2. Calculate Statistics\n";
        cout << "3. Safety Check\n";
        cout << "4. Display Data\n";
        cout << "5. Sort Data\n";
        cout << "6. Impact Analysis\n";
        cout << "7. Health Impact Analysis\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                e.add();
                break;
            case 2:
                e.cal();
                break;
            case 3:
                e.safe();
                break;
            case 4:
                e.display();
                break;
            case 5:
                e.sortData();
                break;
            case 6:
                e.impactAnalysis();
                break;
            case 7:
                e.healthImpactAnalysis();
                break;
            case 8:
                cout << "Exiting.......!" << endl;
                break;
            default:
                cout << "Invalid Choice..!\n";
        }
        if (choice != 8) {
            cout << "Do you want to continue? (1: Yes, 2: No): ";
            cin >> a;
        } else {
            a = 2;
        }
    } while (a == 1);
    return 0;
}
